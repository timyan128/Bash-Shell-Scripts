set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'octol/vim-cpp-enhanced-highlight'
"Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdcommenter'
Plugin 'derekwyatt/vim-fswitch'
Plugin 'Lokaltog/vim-powerline'
Plugin 'tpope/vim-vinegar'
"Plugin 'scrooloose/nerdtree'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-scripts/DfrankUtil'
Plugin 'vim-scripts/vimprj'
Plugin 'dyng/ctrlsf.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
" let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载相应的插件
filetype plugin on

nmap <Leader>q :q<CR>
nmap <Leader>w :w<CR>
nnoremap <Leader>nw <C-W><C-W>
nnoremap <Leader>lw <C-W>l
nnoremap <Leader>hw <C-W>h
nnoremap <Leader>kw <C-W>k
nnoremap <Leader>jw <C-W>j

" 让配置立刻生效
"autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 开启实时搜索功能
set incsearch
" 高亮搜索结果
set hlsearch
" 搜索时大小写不敏感
set ignorecase
" vim自身命令行智能补全
set wildmenu

set background=dark
colorscheme solarized

" 总是显示状态栏
set laststatus=2
" 显示光标当前位置
set ruler
" 显示行号
set number
" 显示当前行和列
set cursorline
set cursorcolumn

" 禁止折行
set nowrap

" 设置状态栏主题风格
let g:Powerline_colorscheme='solarized256'

" 开启语法高亮功能
syntax enable
" 允许用制定语法高亮方案替换默认方案
syntax on

" 自适应不同语言智能缩进
filetype indent on
" 将Tab扩展为空格
set expandtab
" 甚至编辑是Tab占用的空格数
set tabstop=4
" 设置格式化是Tab占用的空格数
set shiftwidth=4
" 让vim把连续数量的空格视为一个Tab
set softtabstop=4

" 基于语法进行代码折叠
set foldmethod=syntax
" 启动时关闭所有折叠代码
set nofoldenable

set history=1000

" *.cpp 和 *.h 间切换
nmap <silent> <Leader>sw :FSHere<cr>

nnoremap <silent> [b :bprevious<cr>
nnoremap <silent> ]b :bnext<cr>
nnoremap <silent> [B :bfirst<cr>
nnoremap <silent> ]B :blast<cr>

" 设置tagbar子窗口的位置出现在编辑区左边
let tagbar_left=0
" 设置显示/隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <Leader>ilt :TagbarToggle<CR>
" 设置子窗口个的宽度
let tagbar_width=32
" tagbar子窗口不显示冗余帮助信息
let g:tagbar_compact=1
" 设置ctags对那些代码标识符生成标签
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'c:classes:0:1',
        \ 'd:macros:0:1',
        \ 'e:enumerators:0:0',
        \ 'f:functions:0:1',
        \ 'g:enumeration:0:1',
        \ 'l:local:0:1',
        \ 'm:members:0:1',
        \ 'n:namespaces:0:1',
        \ 'p:functions_prototypes:0:1',
        \ 's:structs:0:1',
        \ 't:typedefs:0:1',
        \ 'u:unions:0:1',
        \ 'v:global:0:1',
        \ 'x:external:0:1'
    \ ],
    \ 'sro'         : '::',
    \ 'kind2scope'  : {
        \ 'g' : 'enum',
        \ 'n' : 'namespace',
        \ 'c' : 'class',
        \ 's' : 'struct',
        \ 'u' : 'union'
    \ },
    \ 'scope2kind' : {
        \ 'enum'        : 'g',
        \ 'namespace'   : 'n',
        \ 'class'       : 'c',
        \ 'struct'      : 's',
        \ 'union'       : 'u'
    \ }
\ }
" 正向遍历同名标签
nmap <Leader>tn :tnext<CR>
" 反向遍历同名标签
nmap <Leader>tp :tprevious<CR>

" 设置indexer调动ctags的参数
" 默认 --c++kinds=+p+l,重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS不满足YCM需求，改为--fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

" 使用ctrlsf.vim插件在工程内查找光标所在的关键字
nnoremap <Leader>sp :CtrlSF<CR>

"cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

let g:ycm_global_ycm_extra_conf = '/Users/Yiran/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 1
nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>

map <Leader>mbo :MBEOpen<CR>
map <Leader>mbc :MBEClose<CR>
map <Leader>mbt :MBEToggle<CR>
map <Leader>mbd :MBEbd

" c++ syntax highlight plugin
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1

nmap <Leader>m :wa<CR>:make<CR><CR>:cw<CR>
